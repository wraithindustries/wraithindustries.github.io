---
import Layout from "../../../../layouts/BaseLayout.astro";
import ReleaseHeader from "../../../../components/ReleaseNotes/ReleaseHeader.astro";
import fs from "node:fs";
import path from "node:path";

export async function getStaticPaths() {
    const appsDir = path.join(process.cwd(), "src/apps");
    const paths = [];

    if (fs.existsSync(appsDir)) {
        const appDirs = fs.readdirSync(appsDir).filter((dir) => {
            const releaseNotesDir = path.join(appsDir, dir, "release-notes");
            return fs.existsSync(releaseNotesDir) && fs.statSync(releaseNotesDir).isDirectory();
        });

        appDirs.forEach((app) => {
            const releaseNotesDir = path.join(appsDir, app, "release-notes");
            const files = fs
                .readdirSync(releaseNotesDir)
                .filter((file) => file.endsWith(".mdx"))
                .map((file) => file.replace(".mdx", ""));

            files.forEach((version) => {
                paths.push({ params: { app, version } });
            });
        });
    }

    return paths;
}

const { app, version } = Astro.params;

// Load the MDX content
const mdxPath = path.join(process.cwd(), "src/apps", app, "release-notes", `${version}.mdx`);
let content = "";
interface Frontmatter {
    date?: string;
    [key: string]: any;
}

let frontmatter: Frontmatter = {};

if (fs.existsSync(mdxPath)) {
    const rawContent = fs.readFileSync(mdxPath, "utf-8");

    // Extract frontmatter
    const frontmatterMatch = rawContent.match(/^---\n([\s\S]*?)\n---\n([\s\S]*)$/);
    if (frontmatterMatch) {
        const frontmatterString = frontmatterMatch[1];
        const bodyContent = frontmatterMatch[2];

        // Parse frontmatter
        frontmatterString.split("\n").forEach((line) => {
            const [key, ...valueParts] = line.split(":");
            if (key && valueParts.length > 0) {
                const value = valueParts
                    .join(":")
                    .trim()
                    .replace(/^["']|["']$/g, "");
                frontmatter[key.trim()] = value;
            }
        });

        content = bodyContent;
    } else {
        content = rawContent;
    }
}

const appTitle = app.charAt(0).toUpperCase() + app.slice(1);

// Get all versions for this app
const releaseNotesDir = path.join(process.cwd(), "src/apps", app, "release-notes");
let allVersions = [];
if (fs.existsSync(releaseNotesDir)) {
    allVersions = fs
        .readdirSync(releaseNotesDir)
        .filter((file) => file.endsWith(".mdx"))
        .map((file) => file.replace(".mdx", ""))
        .sort((a, b) => b.localeCompare(a)); // Sort versions in descending order
}

// Function to render content with styled headers
function renderStyledContent(content: string): string {
    // Replace ## headers with styled badges that match ReleaseHeader component
    const headerStyles = {
        added: "bg-green-50 text-green-700 ring-green-600/20 dark:bg-green-500/10 dark:text-green-400 dark:ring-green-500/20",
        changed:
            "bg-blue-50 text-blue-700 ring-blue-700/10 dark:bg-blue-500/10 dark:text-blue-400 dark:ring-blue-500/20",
        deprecated:
            "bg-yellow-50 text-yellow-800 ring-yellow-600/20 dark:bg-yellow-500/10 dark:text-yellow-400 dark:ring-yellow-500/20",
        removed:
            "bg-red-50 text-red-700 ring-red-600/10 dark:bg-red-500/10 dark:text-red-400 dark:ring-red-500/20",
        fixed: "bg-purple-50 text-purple-700 ring-purple-700/10 dark:bg-purple-500/10 dark:text-purple-400 dark:ring-purple-500/20",
        security:
            "bg-orange-50 text-orange-800 ring-orange-600/20 dark:bg-orange-500/10 dark:text-orange-400 dark:ring-orange-500/20",
    };

    const styledContent = content
        .replace(
            /## Added/g,
            `<div class="release-section"><span class="inline-flex items-center rounded-md px-3 py-1.5 text-sm font-medium ring-1 ring-inset ${headerStyles.added}">Added</span></div>`,
        )
        .replace(
            /## Changed/g,
            `<div class="release-section"><span class="inline-flex items-center rounded-md px-3 py-1.5 text-sm font-medium ring-1 ring-inset ${headerStyles.changed}">Changed</span></div>`,
        )
        .replace(
            /## Deprecated/g,
            `<div class="release-section"><span class="inline-flex items-center rounded-md px-3 py-1.5 text-sm font-medium ring-1 ring-inset ${headerStyles.deprecated}">Deprecated</span></div>`,
        )
        .replace(
            /## Removed/g,
            `<div class="release-section"><span class="inline-flex items-center rounded-md px-3 py-1.5 text-sm font-medium ring-1 ring-inset ${headerStyles.removed}">Removed</span></div>`,
        )
        .replace(
            /## Fixed/g,
            `<div class="release-section"><span class="inline-flex items-center rounded-md px-3 py-1.5 text-sm font-medium ring-1 ring-inset ${headerStyles.fixed}">Fixed</span></div>`,
        )
        .replace(
            /## Security/g,
            `<div class="release-section"><span class="inline-flex items-center rounded-md px-3 py-1.5 text-sm font-medium ring-1 ring-inset ${headerStyles.security}">Security</span></div>`,
        );

    // Convert markdown to HTML (basic conversion)
    const htmlContent = styledContent
        .split("\n")
        .map((line) => {
            // Convert headers
            if (line.startsWith("# ")) {
                return `<h1>${line.substring(2)}</h1>`;
            }
            // Convert list items
            if (line.startsWith("- ")) {
                return `<li>${line.substring(2)}</li>`;
            }
            return line;
        })
        .join("\n");

    // Wrap consecutive <li> elements in <ul>
    return htmlContent.replace(/(<li>.*<\/li>\n?)+/g, (match) => `<ul>\n${match}</ul>\n`);
}

const renderedContent = renderStyledContent(content);
---

<Layout
    title={`${appTitle} ${version} Release Notes`}
    breadcrumbs={[
        { label: "Apps", href: "/apps" },
        { label: appTitle, href: `/apps/${app}` },
        { label: "Release Notes", href: `/apps/${app}/release-notes` },
        {
            label: version,
            isDropdown: true,
            currentVersion: version,
            versions: allVersions.map((v, index) => ({
                label: index === 0 ? `${v} (latest)` : v,
                href: `/apps/${app}/release-notes/${v}`,
            })),
        },
    ]}
>
    <main class="container mx-auto px-4 py-8 max-w-4xl">
        <div class="mb-8">
            <div class="flex items-center justify-between mb-4">
                <h1 class="text-4xl font-bold">{appTitle} {version}</h1>
            </div>
            {
                frontmatter.date && (
                    <p class="text-gray-600 dark:text-gray-400">
                        Released on{" "}
                        {new Date(frontmatter.date).toLocaleDateString("en-US", {
                            year: "numeric",
                            month: "long",
                            day: "numeric",
                        })}
                    </p>
                )
            }
        </div>

        <div class="release-note-content bg-white dark:bg-gray-800 rounded-lg shadow-md p-8">
            <div class="prose prose-lg dark:prose-invert max-w-none" set:html={renderedContent} />
        </div>
    </main>

    <style>
        .release-note-content :global(h1) {
            font-size: 1.875rem;
            font-weight: 700;
            margin-bottom: 1.5rem;
            color: #111827;
        }

        .release-note-content :global(.release-section) {
            margin-top: 2rem;
            margin-bottom: 1rem;
            position: relative;
        }

        .release-note-content :global(ul) {
            list-style-type: disc;
            padding-left: 1.5rem;
            margin-top: 0.5rem;
            margin-bottom: 1rem;
        }

        .release-note-content :global(ul li + li) {
            margin-top: 0.5rem;
        }

        .release-note-content :global(li) {
            color: #374151;
            line-height: 1.625;
        }

        .release-note-content :global(p) {
            color: #374151;
            line-height: 1.625;
            margin-bottom: 1rem;
        }

        .release-note-content :global(code) {
            background-color: #f3f4f6;
            padding: 0.125rem 0.25rem;
            border-radius: 0.25rem;
            font-size: 0.875rem;
            font-family: monospace;
        }

        @media (prefers-color-scheme: dark) {
            .release-note-content :global(h1) {
                color: white;
            }
            .release-note-content :global(li) {
                color: #d1d5db;
            }
            .release-note-content :global(p) {
                color: #d1d5db;
            }
            .release-note-content :global(code) {
                background-color: #374151;
            }
        }
    </style>
</Layout>
